<?php
/**
 * Created by PhpStorm.
 * User: esuite
 * Date: 31/3/17
 * Time: 02:07 PM
 */
namespace esuite\MIMBundle\Tests\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use esuite\MIMBundle\Entity\Course;
use esuite\MIMBundle\Entity\Group;

use esuite\MIMBundle\Tests\Mock\ActivityMock;
use esuite\MIMBundle\Tests\Mock\GroupMock;
use esuite\MIMBundle\Tests\Mock\CourseMock;
use esuite\MIMBundle\Tests\Mock\GroupSessionMock;
use esuite\MIMBundle\Tests\Mock\ProgrammeMock;
use esuite\MIMBundle\Tests\Mock\SessionMock;
use esuite\MIMBundle\Tests\Mock\UserMock;
use esuite\MIMBundle\Tests\Mock\GroupActivityMock;
use PHPUnit\Framework\TestCase;

class GroupTest extends TestCase
{
    protected ProgrammeMock $programme;
    protected CourseMock $course;
    protected GroupMock $group;
    protected Group $OriginalGroup;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->programme = new ProgrammeMock();
        $this->programme->setId(999999);
        $this->programme->setOverriderReadonly(true);

        $this->course = new CourseMock();
        $this->course->setId( 748292 );
        $this->course->setPublished( true );
        $this->course->setProgramme($this->programme);

        $this->group = new GroupMock();
        $this->group->setCourse($this->course);

        $this->OriginalGroup = new Group();
        $this->OriginalGroup->setCourse($this->course);
    }

    public function testName()
    {
        $name = "This is a test name for a group";

        $this->assertEquals($name, $this->group->setName($name)->getName());
    }

    public function testStartDate()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->group->setStartDate($now)->getStartDate());
    }

    public function testEndDate()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->group->setEndDate($now)->getEndDate());
    }

    public function testColour()
    {
        $color = -1;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());

        $color = 1;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());

        $color = 2;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());

        $color = 3;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());

        $color = 4;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());

        $color = 5;
        $this->assertEquals($color, $this->group->setColour($color)->getColour());
    }

    public function testPeoplesoftStudentGroup()
    {
        $psStudentGroup = "This is a test ps student group for a group";

        $this->assertEquals($psStudentGroup, $this->group->setPsStdntGroup($psStudentGroup)->getPsStdntGroup());
    }

    public function testPeoplesoftDescription()
    {
        $psDescription = "This is a test ps description for a group";

        $this->assertEquals($psDescription, $this->group->setPsDescr($psDescription)->getPsDescr());
    }

    public function testCourseDefault()
    {
        $isCourseDefault = true;

        $this->assertEquals($isCourseDefault, $this->group->setCourseDefault($isCourseDefault)->getCourseDefault());
    }

    public function testNotCourseDefault()
    {
        $isCourseDefault = false;

        $this->assertEquals($isCourseDefault, $this->group->setCourseDefault($isCourseDefault)->getCourseDefault());
    }

    /* Base */
    public function testCreated()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->group->setCreated($now)->getCreated());
    }

    public function testUpdated()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->group->setUpdated($now)->getUpdated());
    }

    public function testUpdatedValue()
    {
        $now = new \DateTime();

        $this->group->setUpdated($now);
        $this->group->setUpdatedValue();

        $this->assertGreaterThanOrEqual($now, $this->group->getUpdated());
    }

    /* Mocks */
    public function testId()
    {
        $id = 912785;
        $this->group->setId($id);
        $this->assertEquals($this->group, $this->group);
    }

    public function testCourse()
    {
        $course = new CourseMock();
        $course->setName("this is a test course for a group");

        $this->assertEquals($course, $this->group->setCourse($course)->getCourse());
    }

    public function testCourseId()
    {
        $course = new CourseMock();
        $course->setName("this is a test course for a group");
        $course->setId(4560923759020);

        $this->assertEquals($course->getId(), $this->group->setCourse($course)->getCourseId());
    }

    public function testAddUser()
    {
        $user1 = new UserMock();
        $user1->setBoxEmail("test1.user@esuite.edu");

        $user2 = new UserMock();
        $user2->setBoxEmail("test2.user@esuite.edu");

        $user3 = new UserMock();
        $user3->setBoxEmail("test3.user@esuite.edu");

        $this->group->addUser($user1);
        $this->group->addUser($user2);
        $this->group->addUser($user3);

        $this->assertEquals(
            [
                $user1,
                $user2,
                $user3,
            ],
            $this->group->getUsers()
        );
    }

    public function testRemoveUser()
    {
        $user1 = new UserMock();
        $user1->setBoxEmail("test1.user@esuite.edu");

        $user2 = new UserMock();
        $user2->setBoxEmail("test2.user@esuite.edu");

        $user3 = new UserMock();
        $user3->setBoxEmail("test3.user@esuite.edu");

        $this->group->addUser($user1);
        $this->group->addUser($user2);
        $this->group->addUser($user3);

        $this->group->removeUser($user2);

        $this->assertEquals(
            [
                "0"=>$user1,
                "2"=>$user3,
            ],
            $this->group->getUsers()
        );
    }

    public function testUserList()
    {
        $user1 = new UserMock();
        $user1->setBoxEmail("test1.user@esuite.edu");
        $user1->setPeoplesoftId("6480272");

        $user2 = new UserMock();
        $user2->setBoxEmail("test2.user@esuite.edu");
        $user2->setPeoplesoftId("7489275");

        $user3 = new UserMock();
        $user3->setBoxEmail("test3.user@esuite.edu");
        $user3->setPeoplesoftId("7458204");

        $this->group->addUser($user1);
        $this->group->addUser($user2);
        $this->group->addUser($user3);

        $this->assertEquals(
            [
                $user1->getPeoplesoftId(),
                $user2->getPeoplesoftId(),
                $user3->getPeoplesoftId(),
            ],
            $this->group->getUsersList()
        );
    }

    public function testGroupActivities()
    {
        $this->group->setId( 4567876541 );

        $activity1 = new ActivityMock();
        $activity1->setId( 469976541 );

        $activity2 = new ActivityMock();
        $activity2->setId( 98756831 );

        $groupActivity1 = new GroupActivityMock();
        $groupActivity1->setGroup($this->group);
        $groupActivity1->setActivity($activity1);
        $groupActivity1->setId( 600011 );

        $groupActivity2 = new GroupActivityMock();
        $groupActivity2->setGroup($this->group);
        $groupActivity2->setActivity($activity2);
        $groupActivity2->setId( 600021 );

        $groupActivities = new ArrayCollection();
        $groupActivities->add($groupActivity1);
        $groupActivities->add($groupActivity2);

        $this->assertEquals($groupActivities->toArray(), $this->group->setGroupActivities( $groupActivities )->getGroupActivities());
    }

    public function testGroupActivitiesObjects()
    {
        $this->group->setId( 4567876541 );

        $activity1 = new ActivityMock();
        $activity1->setId( 469976541 );
        $activity1->setPublished(true);

        $activity2 = new ActivityMock();
        $activity2->setId( 98756831 );

        $groupActivity1 = new GroupActivityMock();
        $groupActivity1->setGroup($this->group);
        $groupActivity1->setActivity($activity1);
        $groupActivity1->setId( 600011 );
        $groupActivity1->setPublished(true);

        $groupActivity2 = new GroupActivityMock();
        $groupActivity2->setGroup($this->group);
        $groupActivity2->setActivity($activity2);
        $groupActivity2->setId( 600021 );

        $groupActivities = new ArrayCollection();
        $groupActivities->add($groupActivity1);
        $groupActivities->add($groupActivity2);

        $this->assertEquals(
            [
                $groupActivity1->getId(),
                $groupActivity2->getId()
            ],
            $this->group->setGroupActivities( $groupActivities )->getGroupActivitiesObjects()
        );
    }

    public function testGroupActivitiesObjectsSerialized()
    {
        $this->group->setId( 4567876541 );

        $activity1 = new ActivityMock();
        $activity1->setId( 469976541 );
        $activity1->setPublished(true);

        $activity2 = new ActivityMock();
        $activity2->setId( 98756831 );

        $groupActivity1 = new GroupActivityMock();
        $groupActivity1->setGroup($this->group);
        $groupActivity1->setActivity($activity1);
        $groupActivity1->setId( 600011 );
        $groupActivity1->setPublished(true);

        $groupActivity2 = new GroupActivityMock();
        $groupActivity2->setGroup($this->group);
        $groupActivity2->setActivity($activity2);
        $groupActivity2->setId( 600021 );

        $groupActivities = new ArrayCollection();
        $groupActivities->add($groupActivity1);
        $groupActivities->add($groupActivity2);

        $this->group->serializeFullObject(true);

        $this->assertEquals(
            [
                $groupActivity1,
                $groupActivity2
            ],
            $this->group->setGroupActivities( $groupActivities )->getGroupActivitiesObjects()
        );
    }

    public function testGroupActivitiesObjectsPublishedOnly()
    {
        $this->group->setId( 4567876541 );

        $activity1 = new ActivityMock();
        $activity1->setId( 469976541 );
        $activity1->setPublished(true);

        $activity2 = new ActivityMock();
        $activity2->setId( 98756831 );

        $groupActivity1 = new GroupActivityMock();
        $groupActivity1->setGroup($this->group);
        $groupActivity1->setActivity($activity1);
        $groupActivity1->setId( 600011 );
        $groupActivity1->setPublished(true);

        $groupActivity2 = new GroupActivityMock();
        $groupActivity2->setGroup($this->group);
        $groupActivity2->setActivity($activity2);
        $groupActivity2->setId( 600021 );

        $groupActivities = new ArrayCollection();
        $groupActivities->add($groupActivity1);
        $groupActivities->add($groupActivity2);

        $this->group->serializeOnlyPublished(true);

        $this->assertEquals([$groupActivity1->getId()], $this->group->setGroupActivities( $groupActivities )->getGroupActivitiesObjects());
    }

    public function testGroupActivitiesObjectsPublishedOnlySerialized()
    {
        $this->group->setId( 4567876541 );

        $activity1 = new ActivityMock();
        $activity1->setId( 469976541 );
        $activity1->setPublished(true);

        $activity2 = new ActivityMock();
        $activity2->setId( 98756831 );

        $groupActivity1 = new GroupActivityMock();
        $groupActivity1->setGroup($this->group);
        $groupActivity1->setActivity($activity1);
        $groupActivity1->setId( 600011 );
        $groupActivity1->setPublished(true);

        $groupActivity2 = new GroupActivityMock();
        $groupActivity2->setGroup($this->group);
        $groupActivity2->setActivity($activity2);
        $groupActivity2->setId( 600021 );

        $groupActivities = new ArrayCollection();
        $groupActivities->add($groupActivity1);
        $groupActivities->add($groupActivity2);

        $this->group->serializeOnlyPublished(true);
        $this->group->serializeFullObject(true);

        $this->assertEquals([$groupActivity1], $this->group->setGroupActivities( $groupActivities )->getGroupActivitiesObjects());
    }


    public function testGroupSessions()
    {
        $this->group->setId( 4567876541 );

        $session1 = new SessionMock();
        $session1->setId( 469976541 );

        $session2 = new SessionMock();
        $session2->setId( 98756831 );

        $groupSession1 = new GroupSessionMock();
        $groupSession1->setGroup($this->group);
        $groupSession1->setSession($session1);
        $groupSession1->setId( 600011 );

        $groupSession2 = new GroupSessionMock();
        $groupSession2->setGroup($this->group);
        $groupSession2->setSession($session2);
        $groupSession2->setId( 600021 );

        $groupSessions = new ArrayCollection();
        $groupSessions->add($groupSession1);
        $groupSessions->add($groupSession2);

        $this->assertEquals($groupSessions->toArray(), $this->group->setGroupSessions( $groupSessions )->getGroupSessions());
    }

    public function testGroupSessionsObjects()
    {
        $this->group->setId( 4567876541 );

        $session1 = new SessionMock();
        $session1->setId( 469976541 );
        $session1->setPublished(true);

        $session2 = new SessionMock();
        $session2->setId( 98756831 );

        $groupSession1 = new GroupSessionMock();
        $groupSession1->setGroup($this->group);
        $groupSession1->setSession($session1);
        $groupSession1->setId( 600011 );
        $groupSession1->setPublished(true);

        $groupSession2 = new GroupSessionMock();
        $groupSession2->setGroup($this->group);
        $groupSession2->setSession($session2);
        $groupSession2->setId( 600021 );

        $groupSessions = new ArrayCollection();
        $groupSessions->add($groupSession1);
        $groupSessions->add($groupSession2);

        $this->assertEquals(
            [
                $groupSession1->getId(),
                $groupSession2->getId()
            ],
            $this->group->setGroupSessions( $groupSessions )->getGroupSessionsObjects()
        );
    }

    public function testGroupSessionsObjectsSerialized()
    {
        $this->group->setId( 4567876541 );

        $session1 = new SessionMock();
        $session1->setId( 469976541 );
        $session1->setPublished(true);

        $session2 = new SessionMock();
        $session2->setId( 98756831 );

        $groupSession1 = new GroupSessionMock();
        $groupSession1->setGroup($this->group);
        $groupSession1->setSession($session1);
        $groupSession1->setId( 600011 );
        $groupSession1->setPublished(true);

        $groupSession2 = new GroupSessionMock();
        $groupSession2->setGroup($this->group);
        $groupSession2->setSession($session2);
        $groupSession2->setId( 600021 );

        $groupSessions = new ArrayCollection();
        $groupSessions->add($groupSession1);
        $groupSessions->add($groupSession2);

        $this->group->serializeFullObject(true);

        $this->assertEquals(
            [
                $groupSession1,
                $groupSession2
            ],
            $this->group->setGroupSessions( $groupSessions )->getGroupSessionsObjects()
        );
    }

    public function testGroupSessionsObjectsPublishedOnly()
    {
        $this->group->setId( 4567876541 );

        $session1 = new SessionMock();
        $session1->setId( 469976541 );
        $session1->setPublished(true);

        $session2 = new SessionMock();
        $session2->setId( 98756831 );

        $groupSession1 = new GroupSessionMock();
        $groupSession1->setGroup($this->group);
        $groupSession1->setSession($session1);
        $groupSession1->setId( 600011 );
        $groupSession1->setPublished(true);

        $groupSession2 = new GroupSessionMock();
        $groupSession2->setGroup($this->group);
        $groupSession2->setSession($session2);
        $groupSession2->setId( 600021 );

        $groupSessions = new ArrayCollection();
        $groupSessions->add($groupSession1);
        $groupSessions->add($groupSession2);

        $this->group->serializeOnlyPublished(true);

        $this->assertEquals([$groupSession1->getId()], $this->group->setGroupSessions( $groupSessions )->getGroupSessionsObjects());
    }

    public function testGroupSessionsObjectsPublishedOnlySerialized()
    {
        $this->group->setId( 4567876541 );

        $session1 = new SessionMock();
        $session1->setId( 469976541 );
        $session1->setPublished(true);

        $session2 = new SessionMock();
        $session2->setId( 98756831 );

        $groupSession1 = new GroupSessionMock();
        $groupSession1->setGroup($this->group);
        $groupSession1->setSession($session1);
        $groupSession1->setId( 600011 );
        $groupSession1->setPublished(true);

        $groupSession2 = new GroupSessionMock();
        $groupSession2->setGroup($this->group);
        $groupSession2->setSession($session2);
        $groupSession2->setId( 600021 );

        $groupSessions = new ArrayCollection();
        $groupSessions->add($groupSession1);
        $groupSessions->add($groupSession2);

        $this->group->serializeOnlyPublished(true);
        $this->group->serializeFullObject(true);

        $this->assertEquals([$groupSession1], $this->group->setGroupSessions( $groupSessions )->getGroupSessionsObjects());
    }

    public function testUsersList() {
        $this->programme->setOverriderReadonly(false);
        $user1 = new UserMock();
        $user1->setBoxEmail("test1.user@esuite.edu");
        $user1->setPeoplesoftId("6480272");

        $user2 = new UserMock();
        $user2->setBoxEmail("test2.user@esuite.edu");
        $user2->setPeoplesoftId("7489275");

        $user3 = new UserMock();
        $user3->setBoxEmail("test3.user@esuite.edu");
        $user3->setPeoplesoftId("7458204");

        $this->group->addUser($user1);
        $this->group->addUser($user2);
        $this->group->addUser($user3);

        $this->assertEquals(
            [],
            $this->group->getUsersList()
        );
    }

    public function testClone() {
        $cloneGroup = clone $this->OriginalGroup;
        $this->assertEquals($cloneGroup->getCourse(), $this->OriginalGroup->getCourse());
    }
}
