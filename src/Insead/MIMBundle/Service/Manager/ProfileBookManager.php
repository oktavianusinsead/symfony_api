<?php

namespace Insead\MIMBundle\Service\Manager;

use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Insead\MIMBundle\Entity\Country;
use Insead\MIMBundle\Entity\Programme;
use Insead\MIMBundle\Entity\Course;
use Insead\MIMBundle\Entity\States;
use Insead\MIMBundle\Entity\User;
use Insead\MIMBundle\Entity\UserProfile;
use Insead\MIMBundle\Entity\UserProfileCache;
use Insead\MIMBundle\Entity\UserToken;

use Insead\MIMBundle\Exception\PermissionDeniedException;
use Psr\Log\LoggerInterface;
use Insead\MIMBundle\Service\StudyNotify;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use JMS\Serializer\Serializer;
use Insead\MIMBundle\Service\BoxManager\BoxManager;
use Insead\MIMBundle\Service\StudyCourseBackup as Backup;
use Insead\MIMBundle\Service\S3ObjectManager;

use Insead\MIMBundle\Exception\ResourceNotFoundException;
use Insead\MIMBundle\Exception\InvalidResourceException;

use Symfony\Component\HttpFoundation\Request;

use Insead\MIMBundle\Service\Manager\LoginManager;


class ProfileBookManager extends Base
{
    /** @var S3ObjectManager $s3 */
    protected $s3;
    protected $login;
    protected $secret;
    protected $aip_enabled;

    //https://github.com/chaudhuri-ab/CrossPlatformCiphers/blob/master/PHP_CIPHER/PHP_CIPHER/index.php
    private static $OPENSSL_CIPHER_NAME = "aes-128-cbc"; //Name of OpenSSL Cipher
    private static $CIPHER_KEY_LEN = 16; //128 bits

    private static $BEARER_HEADER  = 'Bearer';

    private static $DEFAULT_AVATAR = '';

    public function loadServiceManager(S3ObjectManager $s3, LoginManager $login, $config )
    {
        $this->s3                   = $s3;
        $this->login                = $login;
        $aip_config                 = $config['aip_config'];

        $this->secret               = $config["secret"];
        $this->aip_enabled          = $aip_config['aip_enabled'];
    }

    /**
     * Generates the requests to the AWS Lambda function to create a profile book
     * @param Request $request Request Object
     * @param integer $programmeId id of the programme
     *
     * @return array
     * @throws InvalidResourceException
     *
     * @throws ResourceNotFoundException
     */
    public function generateProfileBook(Request $request, $programmeId)
    {   
        $user = $this->getCurrentUserObj($request);
        $scope = $this->getCurrentUserScope($request);

        /** @var Programme $programme */
        $programme = $this->entityManager
            ->getRepository(Programme::class)
            ->findOneBy(["id"=>$programmeId]);

        $this->checkReadWriteAccessToProgramme($request,$programme);

        $profileBookInfo = [];
        $people = [];
        $people["participants"] = [];

        $programme->setForParticipant(true);
        $programme->setIncludeHidden(true);
        $programme->setRequestorId($user->getId());

        if( $scope == "studysuper" ) {
            $programme->setRequestorScope($scope);
        }

        $serviceToken = "";

        //Get Authorization Header
        $headers = $request->headers;
        $authHeader = $headers->get('Authorization');

        //Check if Header value starts with 'Bearer'
        if($authHeader) {
            // API request. Check access_token in 'users' table
            $oauthAccessToken = trim(substr($authHeader, strlen((string) self::$BEARER_HEADER), strlen($authHeader)));
            $serviceToken = $this->login->generateServiceToken( $oauthAccessToken );
        }

        if( $serviceToken ) {
            $profileBookInfo["service_token"] = $serviceToken->getOauthAccessToken();

            /** @var Programme $programme */
            $programme = $this->entityManager
                ->getRepository(Programme::class)
                ->findOneBy(['id' => $programmeId]);

            if( $programme ) {
                //******** labels section ********//
                //set programme date range label
                $startMonth = "";
                $startYear = "";

                $endMonth = "";
                $endYear = "";

                if( !is_null($programme->getStartDate(true)) ) {
                    $startMonth = $programme->getStartDate(true)->format("F");
                    $startYear = $programme->getStartDate(true)->format("Y");
                }

                if( !is_null($programme->getEndDate(true)) ) {
                    $endMonth = $programme->getEndDate(true)->format("F");
                    $endYear = $programme->getEndDate(true)->format("Y");
                }

                if( strcmp($startMonth,$endMonth) != 0 || strcmp($startYear,$endYear) != 0 ) {
                    if( strcmp($startYear,$endYear) != 0 ) {
                        //diff month; diff year
                        $programmeDateLabel = $startMonth . " " . $startYear. " - " . $endMonth . " " . $endYear;
                    } else {
                        //diff month; same year
                        $programmeDateLabel = $startMonth . " - " . $endMonth . " " . $startYear;
                    }
                } else {
                    //same month and year
                    $programmeDateLabel = $startMonth . " " . $startYear;
                }

                //******** people section ********//
                $courses = $programme->getPublishedCourses();

                $participants = [];
                /** @var Course $course */
                foreach( $courses as $course ) {
                    /** @var User $studentObject */
                    foreach($course->getStudents(true) as $studentObject ) {

                        /** @var UserProfileCache $cacheProfile */
                        $cacheProfile =  $studentObject->getCacheProfile();
                        if (!$cacheProfile) continue;

                        $preferredEmail = match ($cacheProfile->getPreferredEmail()) {
                            0 => $cacheProfile->getPersonalEmail(),
                            1 => $cacheProfile->getWorkEmail(),
                            default => $cacheProfile->getUpnEmail(),
                        };

                        $preferredPhone = match ($cacheProfile->getPreferredPhone()) {
                            0 => $cacheProfile->getPersonalPhonePrefix().$cacheProfile->getPersonalPhone(),
                            1 => $cacheProfile->getWorkPhonePrefix().$cacheProfile->getWorkPhone(),
                            2 => $cacheProfile->getCellPhonePrefix().$cacheProfile->getCellPhone(),
                            default => "",
                        };

                        $participants[ $studentObject->getPeoplesoftId() ] = [
                            "peoplesoft_id" => $cacheProfile->getUser()->getPeoplesoftId(),
                            "bio"           => $cacheProfile->getBio(),
                            "nationality"   => $cacheProfile->getNationality(),
                            "position"      => $cacheProfile->getJobTitle(),
                            "company"       => $cacheProfile->getOrganizationTitle(),
                            "state"         => $cacheProfile->getState(),
                            "country"       => $cacheProfile->getCountry(),
                            "phone"         => $preferredEmail,
                            "phone"         => trim($preferredPhone)
                        ];
                    }
                }

                foreach( $participants as $person ) {
                    $profileToAdd["peoplesoft_id"] = $person['peoplesoft_id'];
                    try {
                        $encrypted_profile = $this->getProfileForProfileBook($person['peoplesoft_id']);
                    } catch (\Exception) {
                        $encrypted_profile = false;
                    }

                    try {
                        $encrypted_avatar = $this->getAvatar($person['peoplesoft_id']);
                    } catch (\Exception) {
                        $encrypted_avatar = false;
                    }

                    if ($encrypted_avatar && $encrypted_avatar['avatar']) {
                        $profileToAdd["img"] = $encrypted_avatar['avatar'];
                    } else {
                        $profileToAdd["img"] = $this->encryptAvatar(self::$DEFAULT_AVATAR, $person['peoplesoft_id']);
                    }

                    if ($encrypted_profile && $encrypted_profile['profile']) {
                        $profileToAdd["profile"] = $encrypted_profile['profile'];
                    }

                    array_push($people["participants"],$profileToAdd);
                }

                $profileBookInfo["people"] = $people["participants"];

                //******** consolidate all data ********//
                $profileBookInfo["title"]             = $programme->getName();
                $profileBookInfo["date"]              = $programmeDateLabel;
                $profileBookInfo["companyLogoStatus"] = $programme->getCompanyLogo();
                $profileBookInfo["role"]              = "Participants";

                $bookPrefix = substr( $this->cleanName($programme->getName()), 0, 150);
                if( $programme->getStartDate() ) {
                    $bookPrefix = $bookPrefix . "-" . $programme->getStartDate()->format("MY");
                }
                $profileBookInfo["book_prefix"] = $bookPrefix;
                unset($profileBookInfo['service_token']);
                $profileBookInfo = [$profileBookInfo];

                $programmeName = $this->cleanName($programme->getName());
                $this->s3->setCustomMetadata([
                    "filename" => $programmeName,
                ]);

                $resultFull = $this->s3->uploadToS3(
                    "preprocessed-resources/data-profile-book-full/" . $programme->getId() . ".json",
                    json_encode($profileBookInfo, JSON_UNESCAPED_UNICODE),
                    true
                );

                $resultBusiness = $this->s3->uploadToS3(
                    "preprocessed-resources/data-profile-book-business/" . $programme->getId() . ".json",
                    json_encode($profileBookInfo, JSON_UNESCAPED_UNICODE),
                    true
                );

                $this->log( "Request profile book generation Full: " . json_encode($resultFull) . " Business: " . json_encode($resultBusiness) );

                /** @var Course $course */
                foreach( $courses as $course ) {
                    $this->log("Need to reset backup for course " . $course->getId());

                    $backupService = $this->backup;
                    $backupService->updateCoursebackup($course);
                }

                return [$resultFull, $resultBusiness];

            } else {
                $this->logger->error('Invalid Programme');
                throw new ResourceNotFoundException('Programme not found');
            }
        } else {
            $this->logger->error('Unable to create ServiceToken for Profile Book');
            throw new ResourceNotFoundException('Unable to create ServiceToken for Profile Book');
        }
    }

    /**
     * check if a profile book is available for the programme
     * checks if user's Token is valid
     * @param Request $request Request Object
     * @param integer $programmeId id of the programme
     *
     * @return array
     * @throws InvalidResourceException
     *
     * @throws ResourceNotFoundException
     */
    public function getProfileBook(Request $request, $programmeId)
    {

        $user = $this->getCurrentUserObj($request);

        /** @var Programme $programme */
        $programme = $this->entityManager
            ->getRepository(Programme::class)
            ->findOneBy(['id' => $programmeId]);

        if( $programme ) {


            $programme->setForParticipant(true);
            $programme->setForStaff(false);
            $programme->setRequestorId($user->getId());

            $this->checkReadWriteAccessToProgramme($request,$programme);

            $this->log("Generating temporary Profile Book URLs for " . $user->getPeoplesoftId());

            $bookPrefix = substr( $this->cleanName($programme->getName()), 0, 150);
            if( $programme->getStartDate() ) {
                $bookPrefix = $bookPrefix . "-" . $programme->getStartDate()->format("MY");
            }


            return ["profile-books" => ["id"                        => $programme->getId(), "programme"                 => $programme->getId(), "book_prefix"               => $bookPrefix, "book_timestamp_full"       => $programme->getBookTimestampFull(), "book_timestamp_business"   => $programme->getBookTimestampBusiness(), "last_person_update"        => $programme->getLatestUpdatedPersonTimestamp(), "full"                      => $this->s3->generateProfileBookTempUrl( $programmeId, "full", $user->getPeoplesoftId() ), "business"                  => $this->s3->generateProfileBookTempUrl( $programmeId, "business", $user->getPeoplesoftId() )]];

        } else {
            $this->logger->error('Invalid Programme');
            throw new ResourceNotFoundException('Programme not found');
        }
    }


    /**
     * checks if user's Token is valid
     * check if program is accessible by user
     * create a s3 bucket object in location using token and progid
     * @param Request $request Request Object
     * @param integer $programmeId id of the programme
     *
     * @return array
     *
     * @throws PermissionDeniedException
     * @throws ResourceNotFoundException
     */
    public function deleteProfileBooks(Request $request, $programmeId)
    {
        $scope = $this->getCurrentUserScope($request);
        $user = $this->getCurrentUserObj($request);

        if($scope!='studysuper'){
            throw new PermissionDeniedException('Permission Denied for the current user ');
        }

        //get Auth Header
        $authHeader = $request->headers->get('Authorization');

        // Find the Programme
        $programme = $this->entityManager
            ->getRepository(Programme::class)
            ->findOneBy(['id' => $programmeId]);


        $this->log( "scope :".json_encode($scope) );

        //check if user has access to the programme
        $programme->setRequestorId($user->getId());
        $programme->setRequestorScope($scope);

        //submit a profile refresh for profile-book by uploading a json file
        /** @var UserToken $serviceToken */
        $serviceToken = $this->login->generateServiceToken( $authHeader );
        if( $serviceToken ) {
            $this->log("Triggering a generation for profile book cleanup under programme " . $programmeId);
            $programmeData = ["programme_id" => $programmeId, "service_token" => $serviceToken->getOauthAccessToken()];

            $result = $this->s3->uploadToS3(
                "cleanup/programmes/" . $programmeId . ".json",
                json_encode($programmeData),
                true
            );

            $this->log( "profilebook cleanup program json created for  [" . $programmeId . "]:" . json_encode($result) );

            return ["status"=>"success"];
        }
        else{
            return ["status"=>"permission denied"];
        }


    }

    /**
     * Handler that provides an encrypted profile information for the AWS Lambda Function
     *  checks if user's Token is valid
     * @param Request $request Request Object
     * @param String $peoplesoftId peoplesoft id of the user
     *
     * @return array
     */
    public function getPersonInfo(Request $request, $peoplesoftId)
    {
        return $this->getProfileForProfileBook($peoplesoftId);
    }

    private function getProfileForProfileBook($peoplesoftId)
    {
        $name = "";
        $profile["first_name"] = "";
        $profile["last_name"] = "";
        $profile["bio"] = "";
        $nationality = [];
        $profile["main_job"]["job_title"] = "";
        $profile["main_job"]["organisation"] = "";
        $profile["main_job"]["city"] = "";
        $profile["main_job"]["country"] = "";
        $profile["main_job"]["state"] = "";
        $email = "";
        $phone = "";

        /** @var User $user */
        $user   = $this->entityManager
            ->getRepository(User::class)
            ->findOneBy(['peoplesoft_id' => $peoplesoftId]);

        $studyProfile = null;
        if ($user){
            if ($user->getCoreProfile()){
                /** @var UserProfile $studyProfile */
                $studyProfile = $user->getCoreProfile();
            } else {
                if ($user->getCacheProfile()){
                    /** @var UserProfileCache $studyProfile */
                    $studyProfile = $user->getCacheProfile();
                }
            }
        }

        if ($studyProfile){
            $name = trim(($studyProfile->getFirstname() ?: "")." ".strtoupper(($studyProfile->getLastname() ?: "")));
            $profile["first_name"] = ($studyProfile->getFirstname() ?: "");
            $profile["last_name"] = ($studyProfile->getLastname() ?: "");
            $profile["bio"] = ($studyProfile->getBio() ?: "");
            $nationality = ($studyProfile->getNationality() ? explode(",",$studyProfile->getNationality()) : []);
            $profile["main_job"]["job_title"] = ($studyProfile instanceof UserProfile ? ($studyProfile->getPreferredJobTitle() ?: "") : ($studyProfile->getJobTitle() ?: ""));
            $profile["main_job"]["organisation"] = ($studyProfile->getOrganizationTitle() ?: "");
            $profile["main_job"]["city"] = ($studyProfile->getCity() ?: "");


            if ($studyProfile->getCountryCode()) {
                /** @var Country $country */
                $country = $this->entityManager
                    ->getRepository(Country::class)
                    ->findOneBy( ['ps_country_code' => $studyProfile->getCountryCode()]);

                if ($country) {
                    $profile["main_job"]["country"] = ($country->getTitle() ?: "");
                    if ($country->getStates()) {
                        /** @var States $state */
                        foreach ($country->getStates() as $state) {
                            if ($studyProfile->getState() === $state->getStateCode()) {
                                $profile["main_job"]["state"] = $state->getStateName();
                                break;
                            }
                        }
                    }
                }
            }

            $prefEmail = $studyProfile->getPreferredEmail();
            $hideEmail = false;
            if (method_exists($studyProfile, 'getHideEmail')){
                $hideEmail = $studyProfile->getHideEmail();
            }

            if (isset($prefEmail) && !$hideEmail){
                $email = match ($prefEmail) {
                    0 => $studyProfile->getPersonalEmail(),
                    1 => $studyProfile->getWorkEmail(),
                    default => '',
                };
            }

            $prefPhone = $studyProfile->getPreferredPhone();
            $hidePhone = false;
            if (method_exists($studyProfile, 'getHidePhone')){
                $hidePhone = $studyProfile->getHidePhone();
            }

            if (isset($prefPhone) && !$hidePhone){
                $phone = match ($prefPhone) {
                    0 => trim(($studyProfile->getPersonalPhonePrefix() ? "+" . $studyProfile->getPersonalPhonePrefix() : "") . " " . $studyProfile->getPersonalPhone()),
                    1 => trim(($studyProfile->getWorkPhonePrefix() ? "+" . $studyProfile->getWorkPhonePrefix() : "") . " " . $studyProfile->getWorkPhone()),
                    2 => trim(($studyProfile->getCellPhonePrefix() ? "+" . $studyProfile->getCellPhonePrefix() : "") . " " . $studyProfile->getCellPhone()),
                    default => '',
                };
                
            }

        }

        $personInfo = [
            "name" => $name,
            "firstname" => $profile["first_name"],
            "lastname" => $profile["last_name"],
            "bio" => $profile["bio"],
            "nationality" => implode(", ", $nationality),
            "position" => $profile["main_job"]["job_title"],
            "company" => $profile["main_job"]["organisation"],
            "city" => $profile["main_job"]["city"],
            "country" => $profile["main_job"]["country"],
            "state" => $profile["main_job"]["state"]
        ];

        $email = trim($email);
        if (strlen($email) > 0) {
            if (!$hideEmail) {
                $personInfo["email"] = $email;
            }
        }

        $phone = trim($phone);
        if (strlen($phone) > 0) {
            if (!$hidePhone) {
                $personInfo["phone"] = $phone;
            }
        }

        $now = new \DateTime();

        $encryptedProfile = $this->encrypt(
            $this->secret . $peoplesoftId, //key
            $now->format("YmdHis")."00", //iv
            json_encode($personInfo) //data
        );

        return ["peoplesoft_id" => $peoplesoftId, "profile" => $encryptedProfile];
    }

    /**
     * Handler that provides an encrypted profile avatar information for the AWS Lambda Function
     *  checks if user's Token is valid
     * @param Request       $request            Request Object
     * @param integer       $peoplesoftId       peoplesoft id of the user
     *
     * @throws ResourceNotFoundException
     *
     * @return array
     */
    public function getAvatarInfo(Request $request, $peoplesoftId)
    {
        return $this->getAvatar($peoplesoftId);
    }

    /**
     * Handler to Fetch User avatar from CDN
     *
     * @param $peoplesoftId
     *
     * @return array
     * @throws ResourceNotFoundException
     */
    private function getAvatar($peoplesoftId)
    {
        $path = "myinsead/profile-images/" . md5((string) $peoplesoftId) . ".jpg";

        if( !$this->s3->checkIfCdnItemExists($path) ) {
            $this->log('User Picture not found ('.$peoplesoftId.')');
            throw new ResourceNotFoundException('User Picture not found');
        }

        $obj = $this->s3->getCdnItem($path);

        $avatar = base64_encode((string) $obj['Body']);

        return ["peoplesoft_id" => $peoplesoftId, "avatar" => $this->encryptAvatar($avatar, $peoplesoftId)];
    }

    private function encryptAvatar($base64Image, $peoplesoftId) {
        $now = new \DateTime();

        return $this->encrypt(
            $this->secret . $peoplesoftId, //key
            $now->format("YmdHis")."00", //iv
            $base64Image //data
        );
    }

    /**
     * Handler that checks S3 and updates the profile book timestamps
     *  checks if user's Token is valid
     * @param Request $request Request Object
     * @param integer $programmeId Id of the Programme to update
     *
     * @return array
     * @throws ResourceNotFoundException
     * @throws ORMException
     * @throws OptimisticLockException
     */
    public function setProfileBookTimestamp(Request $request, $programmeId)
    {

        /** @var Programme $programme */
        $programme = $this->entityManager
            ->getRepository(Programme::class)
            ->findOneBy(['id' => $programmeId]);

        if( $programme ) {

            $this->log("Generating temporary Profile Book URLs for " . $programmeId);

            $modificationDate = $this->s3->getObjectLastUpdatedDate($programmeId,"full");
            if( $modificationDate && $modificationDate > $programme->getBookTimestampFull() ) {
                $programme->setBookTimestampFull($modificationDate);
            }

            $modificationDate = $this->s3->getObjectLastUpdatedDate($programmeId,"business");
            if( $modificationDate && $modificationDate > $programme->getBookTimestampBusiness() ) {
                $programme->setBookTimestampBusiness($modificationDate);
            }

            $em = $this->entityManager;
            $em->persist($programme);
            $em->flush();

            return ["programmes" => $programme];

        } else {
            $this->logger->error('Invalid Programme');
            throw new ResourceNotFoundException('Programme not found');
        }
    }

    /**
     * Handler that checks the user's Programmes
     *  checks if user's Token is valid
     * @param Request       $request            Request Object
     * @param integer       $peoplesoftId       peoplesoft id of the user
     *
     * @return array
     */
    public function getPersonProgrammes(Request $request, $peoplesoftId)
    {

        $programmes = [];

        /** @var User $user */
        $user = $this->entityManager
            ->getRepository(User::class)
            ->findOneBy(["peoplesoft_id"=>$peoplesoftId]);

        /** @var Programme $items */
        $items = $this->entityManager
            ->getRepository(Programme::class)
            ->findAll();

        /** @var Programme $programme */
        foreach( $items as $programme ) {
            $programme->setRequestorId($user->getId());
            $programme->setForParticipant(true);
            $programme->setForStaff(false);

            $toInclude = $programme->checkIfMy() && ( $programme->checkIfLive() || $programme->checkIfPending() );

            if( $toInclude ) {
                array_push($programmes, $programme);
            }
        }

        return ['programmes' => $programmes];
    }

    /**
     * Handler that gets the list of programmes with outdated profile books
     *  checks if user's Token is valid
     * @param Request       $request            Request Object
     *
     * @throws ResourceNotFoundException
     *
     * @return array
     */
    public function getOutdatedProfileBooks(Request $request)
    {

        $pendingProgrammes = [];
        $liveProgrammes = [];
        $completedProgrammes = [];

        $user = $this->getCurrentUserObj($request);

        /** @var Programme $items */
        $items = $this->entityManager
            ->getRepository(Programme::class)
            ->findAll();

        /** @var Programme $programme */
        foreach( $items as $programme ) {
            $programme->setForParticipant(true);
            $programme->setForStaff(false);
            $programme->setRequestorId($user->getId());

            $toInclude = ($programme->getBookTimestampBusiness() == "" || $programme->getBookTimestampFull() == "");

            //if it is not yet included, check business vs latest person update
            if( !$toInclude && $programme->getLatestUpdatedPersonTimestamp() != "" ) {
                if( $programme->getBookTimestampBusiness() != "" ) {
                    $toInclude = $programme->getLatestUpdatedPersonTimestamp() > $programme->getBookTimestampBusiness();
                }
            }

            //if it is not yet included, check full vs latest person update
            if( !$toInclude && $programme->getLatestUpdatedPersonTimestamp() != "" ) {
                if( $programme->getBookTimestampFull() != "" ) {
                    $toInclude = $programme->getLatestUpdatedPersonTimestamp() > $programme->getBookTimestampFull();
                }
            }

            $programmeObj = ["id" => $programme->getId(), "name" => $programme->getName(), "last_person_update" => $programme->getLatestUpdatedPersonTimestamp(), "book_timestamp_business" => $programme->getBookTimestampBusiness(), "book_timestamp_full" => $programme->getBookTimestampFull()];

            if( $toInclude ) {
                if( $programme->checkIfPending() ) {
                    array_push($pendingProgrammes, $programmeObj);

                } else if( $programme->checkIfLive() ) {
                    array_push($liveProgrammes, $programmeObj);

                } else if( $programme->checkIfCompleted() ) {
                    array_push($completedProgrammes, $programmeObj);

                } else {
                    //in case there are items that are not marked upcoming/live/completed, set them as completed
                    array_push($completedProgrammes, $programmeObj);
                }
            }
        }

        return ['programmes' => ['pending' => $pendingProgrammes, 'live' => $liveProgrammes, 'completed' => $completedProgrammes]];
    }




    /**
     * Encrypt data using AES Cipher (CBC) with 128 bit key
     *
     * reference: https://github.com/chaudhuri-ab/CrossPlatformCiphers/blob/master/PHP_CIPHER/PHP_CIPHER/index.php
     *
     * @param String $key - key to use should be 16 bytes long (128 bits)
     * @param String $iv - initialization vector
     * @param String $data - data to encrypt
     * @return String encrypted data in base64 encoding with iv attached at end after a :
     */
    protected function encrypt($key, $iv, $data) {
        if (strlen($key) < self::$CIPHER_KEY_LEN) {
            $key = str_pad("$key", self::$CIPHER_KEY_LEN, "0"); //0 pad to len 16
        } else if (strlen($key) > self::$CIPHER_KEY_LEN) {
            $key = substr($key, 0, self::$CIPHER_KEY_LEN); //truncate to 16 bytes
        }

        $encodedEncryptedData = base64_encode(openssl_encrypt($data, self::$OPENSSL_CIPHER_NAME, $key, OPENSSL_RAW_DATA, $iv));
        $encodedIV = base64_encode($iv);
        $encryptedPayload = $encodedEncryptedData.":".$encodedIV;

        return $encryptedPayload;

    }
    /**
     * Decrypt data using AES Cipher (CBC) with 128 bit key
     *
     * reference: https://github.com/chaudhuri-ab/CrossPlatformCiphers/blob/master/PHP_CIPHER/PHP_CIPHER/index.php
     *
     * @param String $key - key to use should be 16 bytes long (128 bits)
     * @param String $data - data to be decrypted in base64 encoding with iv attached at the end after a :
     * @return String decrypted data
     */
    protected function decrypt($key, $data) {
        if (strlen($key) < self::$CIPHER_KEY_LEN) {
            $key = str_pad("$key", self::$CIPHER_KEY_LEN, "0"); //0 pad to len 16
        } else if (strlen($key) > self::$CIPHER_KEY_LEN) {
            $key = substr($key, 0, self::$CIPHER_KEY_LEN); //truncate to 16 bytes
        }

        $parts = explode(':', $data); //Separate Encrypted data from iv.
        $decryptedData = openssl_decrypt(base64_decode($parts[0]), self::$OPENSSL_CIPHER_NAME, $key, OPENSSL_RAW_DATA, base64_decode($parts[1]));

        return $decryptedData;
    }
}
