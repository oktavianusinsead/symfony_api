<?php
/**
 * Created by PhpStorm.
 * User: INSEAD
 * Date: 31/3/17
 * Time: 10:12 AM
 */
namespace Insead\MIMBundle\Tests\Entity;

use Doctrine\Common\Collections\ArrayCollection;

use Insead\MIMBundle\Entity\ProgrammeAdministrator;
use Insead\MIMBundle\Tests\Mock\CourseSubscriptionMock;
use Insead\MIMBundle\Tests\Mock\ProgrammeMock;
use Insead\MIMBundle\Tests\Mock\CourseMock;
use Insead\MIMBundle\Tests\Mock\ProgrammeUserMock;
use Insead\MIMBundle\Tests\Mock\UserMock;
use Insead\MIMBundle\Tests\Mock\RoleMock;
use PHPUnit\Framework\TestCase;

class ProgrammeTest extends TestCase
{
    protected ProgrammeMock $programme;
    protected CourseMock $course;
    private $now;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->now = new \DateTime();

        $this->programme = new ProgrammeMock();
        $this->programme->setId( 456787654 );
        $this->programme->setOverriderReadonly(true);

        $this->course = new CourseMock();
        $this->course->setId( 748292 );
        $this->course->setName("this is test Course");
        $this->course->setPublished( true );
        $this->course->setProgramme($this->programme);
        $this->course->setStartDate($this->now);
        $this->course->setStartDate($this->now->modify("+5 days"));
    }
    
    public function testName()
    {
        $name = "this is a test name for a programme";

        $this->assertEquals($name, $this->programme->setName($name)->getName());
    }

    public function testCode()
    {
        $code = "this is a test code for a programme";

        $this->assertEquals($code, $this->programme->setCode($code)->getCode());
    }

    public function testWelcome()
    {
        $welcome = "this is a test welcome for a programme";

        $this->assertEquals($welcome, $this->programme->setWelcome($welcome)->getWelcome());
    }

    public function testPublished()
    {
        $isPublished = true;

        $this->assertEquals($isPublished, $this->programme->setPublished($isPublished)->getPublished());
    }

    public function testNotPublished()
    {
        $isPublished = false;

        $this->assertEquals($isPublished, $this->programme->setPublished($isPublished)->getPublished());
    }

    public function testWithLinkWebmail()
    {
        $withLinkWebmail = true;

        $this->assertEquals($withLinkWebmail, $this->programme->setLinkWebmail($withLinkWebmail)->getLinkWebmail());
    }

    public function testWithoutLinkWebmail()
    {
        $withLinkWebmail = false;

        $this->assertEquals($withLinkWebmail, $this->programme->setLinkWebmail($withLinkWebmail)->getLinkWebmail());
    }

    public function testWithLinkYammer()
    {
        $withLinkYammer = true;

        $this->assertEquals($withLinkYammer, $this->programme->setLinkYammer($withLinkYammer)->getLinkYammer());
    }

    public function testWithoutLinkYammer()
    {
        $withLinkYammer = false;

        $this->assertEquals($withLinkYammer, $this->programme->setLinkYammer($withLinkYammer)->getLinkYammer());
    }

    public function testWithLinkMyINSEAD()
    {
        $withLinkMyINSEAD = true;

        $this->assertEquals($withLinkMyINSEAD, $this->programme->setLinkMyinsead($withLinkMyINSEAD)->getLinkMyinsead());
    }

    public function testWithoutLinkMyINSEAD()
    {


        $withLinkMyINSEAD = false;

        $this->assertEquals($withLinkMyINSEAD, $this->programme->setLinkMyinsead($withLinkMyINSEAD)->getLinkMyinsead());
    }

    public function testWithLinkFacultyBlogs()
    {
        $withLinkFacultyBlogs = true;

        $this->assertEquals($withLinkFacultyBlogs, $this->programme->setFacultyBlogs($withLinkFacultyBlogs)->getFacultyBlogs());
    }

    public function testWithoutLinkFacultyBlogs()
    {
        $withLinkFacultyBlogs = false;

        $this->assertEquals($withLinkFacultyBlogs, $this->programme->setFacultyBlogs($withLinkFacultyBlogs)->getFacultyBlogs());
    }

    public function testWithLinkINSEADKnowledge()
    {
        $withLinkINSEADKnowledge = true;

        $this->assertEquals($withLinkINSEADKnowledge, $this->programme->setInseadKnowledge($withLinkINSEADKnowledge)->getInseadKnowledge());
    }

    public function testWithoutLinkINSEADKnowledge()
    {
        $withLinkINSEADKnowledge = false;

        $this->assertEquals($withLinkINSEADKnowledge, $this->programme->setInseadKnowledge($withLinkINSEADKnowledge)->getInseadKnowledge());
    }


    public function testWithLinkAmphiHQ()
    {
        $withLinkAmphiHQ = true;

        $this->assertEquals($withLinkAmphiHQ, $this->programme->setLinkAmphiHq($withLinkAmphiHQ)->getLinkAmphiHq());
    }

    public function testWithoutLinkAmphiHQ()
    {
        $withLinkAmphiHQ = false;

        $this->assertEquals($withLinkAmphiHQ, $this->programme->setLinkAmphiHQ($withLinkAmphiHQ)->getLinkAmphiHQ());
    }

    public function testSetRequestor()
    {
        $this->programme->setRequestorScope('studysuper');
        $this->assertEquals(true, $this->programme->checkIfSuperAdmin());
    }

    public function testForStaff()
    {
        $this->programme->setForStaff(true);
        $this->assertEquals(true, $this->programme->checkIfMy());
    }

    public function testForParticipant()
    {
        $this->programme->setForParticipant(true);
        $this->assertEquals(true, $this->programme->checkIfMy());
    }

    public function testForIncludeHidden()
    {
        $this->programme->setIncludeHidden(true);
        $this->assertEquals(true, $this->programme->checkIfMy());
    }

    public function testPrivate()
    {
        $this->programme->setPrivate(true);
        $this->assertEquals(true, $this->programme->getPrivate());
    }

    public function testStarOnSunday()
    {
        $this->programme->setStartsOnSunday(true);
        $this->assertEquals(true, $this->programme->getStartsOnSunday());
    }

    public function testCompanyLogo()
    {
        $this->programme->setCompanyLogo(true);
        $this->assertEquals(true, $this->programme->getCompanyLogo());
    }

    public function testCompanyLogoSize()
    {
        $this->programme->setCompanyLogoSize(2);
        $this->assertEquals(2, $this->programme->getCompanyLogoSize());
    }

    public function testWithDiscussion()
    {
        $this->programme->setWithDiscussions(true);
        $this->assertEquals(true, $this->programme->getWithDiscussions());
    }

    public function testSetViewType()
    {
        $this->programme->setViewType(1);
        $this->assertEquals(1, $this->programme->getViewType());

        $this->programme->setViewType(2);
        $this->assertEquals(2, $this->programme->getViewType());

        $this->programme->setViewType(3);
        $this->assertEquals(3, $this->programme->getViewType());
    }

    public function testLearningJourney()
    {
        $this->programme->setLearningJourney(true);
        $this->assertEquals(true, $this->programme->getLearningJourney());
    }

    public function testDiscussionPublished()
    {
        $this->programme->setDiscussionsPublish(true);
        $this->assertEquals(true, $this->programme->getDiscussionsPublish());
    }

    public function testStartDateTimeZone()
    {
        $date1 = new \DateTime( '2017-03-01' );
        $enddate1 = new \DateTime( '2017-03-03' );
        $date2 = new \DateTime( '2017-02-01' );
        $enddate2 = new \DateTime( '2017-03-03' );

        $course1 = new CourseMock();
        $course1->setId( 46997654 );
        $course1->setStartDate($date1);
        $course1->setEndDate($enddate1);
        $course1->setTimezone("+08:00");

        $course2 = new CourseMock();
        $course2->setId( 9875683 );
        $course2->setStartDate($date2);
        $course2->setEndDate($enddate2);
        $course2->setTimezone("+08:00");

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->setCourses( $courses );
        $this->assertEquals("+08:00", $this->programme->getStartDateTimeZone());
        $this->assertEquals("+08:00", $this->programme->getEndDateTimezone());
    }

    /* Base */
    public function testCreated()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->programme->setCreated($now)->getCreated());
    }

    public function testUpdated()
    {
        $now = new \DateTime();

        $this->assertEquals($now, $this->programme->setUpdated($now)->getUpdated());
    }

    public function testUpdatedValue()
    {
        $now = new \DateTime();

        $this->programme->setUpdated($now);
        $this->programme->setUpdatedValue();

        $this->assertGreaterThanOrEqual($now, $this->programme->getUpdated());
    }

    /* Mocks */
    public function testId()
    {
        $id = 98765345678;

        $this->assertEquals($id, $this->programme->setId($id)->getId());
    }

    public function testCourses()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->assertEquals($courses->toArray(), $this->programme->setCourses( $courses )->getCourses());
    }

    public function testCoursesPublishedOnly()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );
        //only course1 is published
        $course1->setPublished(true);

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->serializeOnlyPublished(true);

        $this->assertEquals([$course1->getId()], $this->programme->setCourses( $courses )->getCoursesIds());
    }


    public function testCourseIds()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->assertEquals(
            [
                $course1->getId(),
                $course2->getId()
            ],
            $this->programme->setCourses( $courses )->getCoursesIds()
        );
    }

    public function testCourseIdsSerializedFully()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->serializeFullObject(true);

        $this->assertEquals($courses->toArray(), $this->programme->setCourses( $courses )->getCoursesIds());
    }

    public function testCourseIdsDoNotSerializedFully()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->serializeFullObject(false);

        $this->assertEquals(
            [
                $course1->getId(),
                $course2->getId()
            ],
            $this->programme->setCourses( $courses )->getCoursesIds()
        );
    }

    public function testSubscribedCourseIds()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->showOnlySubscribedCourses(
            [
                $course1->getId(),
                $course2->getId()
            ]
        );

        $this->assertEquals(
            [
                $course1->getId(),
                $course2->getId()
            ],
            $this->programme->setCourses( $courses )->getCoursesIds()
        );
    }

    public function testHiddenCourseIds()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->programme->setHideCourses(true);

        $this->assertEquals([],$this->programme->setCourses( $courses )->getCoursesIds());
    }

    public function testPublishedCourses()
    {
        $course1 = new CourseMock();
        $course1->setId( 46997654 );
        $course1->setPublished(true);

        $course2 = new CourseMock();
        $course2->setId( 9875683 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);

        $this->assertEquals([$course1], $this->programme->setCourses( $courses )->getPublishedCourses());
    }

    public function testStartDate()
    {
        $date1 = new \DateTime( '2017-03-01' );
        $date2 = new \DateTime( '2017-02-01' );
        $date3 = new \DateTime( '2017-01-01' );

        $course1 = new CourseMock();
        $course1->setId( 46997654 );
        $course1->setStartDate( $date1 );
        $course1->setPublished(true);

        $course2 = new CourseMock();
        $course2->setId( 9875683 );
        $course2->setStartDate( $date2 );

        $course3 = new CourseMock();
        $course3->setId( 7936654829 );
        $course3->setStartDate( $date3 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);
        $courses->add($course3);
        $this->programme->setCourses( $courses );

        $this->assertEquals($date3, $this->programme->getStartDate());
        $this->assertEquals($date1, $this->programme->getStartDate(true));
    }

    public function testEndDate()
    {
        $date1 = new \DateTime( '2017-01-01' );
        $date2 = new \DateTime( '2017-02-01' );
        $date3 = new \DateTime( '2017-03-01' );

        $course1 = new CourseMock();
        $course1->setId( 46997654 );
        $course1->setEndDate( $date1 );
        $course1->setPublished(true);

        $course2 = new CourseMock();
        $course2->setId( 9875683 );
        $course2->setEndDate( $date2 );

        $course3 = new CourseMock();
        $course3->setId( 7936654829 );
        $course3->setEndDate( $date3 );

        $courses = new ArrayCollection();
        $courses->add($course1);
        $courses->add($course2);
        $courses->add($course3);

        $this->programme->getProgrammeAdministrators();

        $this->assertEquals($date3, $this->programme->setCourses( $courses )->getEndDate());
        $this->assertEquals($date1, $this->programme->getEndDate(true));
    }

    public function testCourseSubscriptions()
    {
        $courseSubscription1 = new CourseSubscriptionMock();
        $courseSubscription1->setId( 46997654 );

        $courseSubscription2 = new CourseSubscriptionMock();
        $courseSubscription2->setId( 9875683 );

        $courseSubscriptions = new ArrayCollection();
        $courseSubscriptions->add($courseSubscription1);
        $courseSubscriptions->add($courseSubscription2);

        $this->assertEquals($courseSubscriptions, $this->programme->setCourseSubscriptions( $courseSubscriptions )->getCourseSubscriptions());
    }

    public function testCoreGroup()
    {
        $programmeUser1 = new ProgrammeUserMock();
        $programmeUser1->setId( 46997654 );

        $programmeUser2 = new ProgrammeUserMock();
        $programmeUser2->setId( 9875683 );

        $programmeUsers = new ArrayCollection();
        $programmeUsers->add($programmeUser1);
        $programmeUsers->add($programmeUser2);

        $this->assertEquals($programmeUsers, $this->programme->setProgrammeCoreGroup( $programmeUsers )->getProgrammeCoreGroup());
    }

    public function testCoreGroupPSoftIds()
    {
        $user1 = new UserMock();
        $user1->setId( 7593 );
        $user1->setPeoplesoftId( 1234567 );

        $user2 = new UserMock();
        $user2->setId( 95847 );
        $user2->setPeoplesoftId( 3456789 );

        $user3 = new UserMock();
        $user3->setId( 9868 );
        $user3->setPeoplesoftId( 9865647 );

        $programmeUser1 = new ProgrammeUserMock();
        $programmeUser1->setId( 46997654 );
        $programmeUser1->setUser($user1);
        $programmeUser1->setRowIndex(1);
        $programmeUser1->setOrderIndex(1);

        $programmeUser2 = new ProgrammeUserMock();
        $programmeUser2->setId( 9875683 );
        $programmeUser2->setUser($user2);
        $programmeUser2->setRowIndex(2);
        $programmeUser2->setOrderIndex(1);

        $programmeUser3 = new ProgrammeUserMock();
        $programmeUser3->setId( 5968739 );
        $programmeUser3->setUser($user3);
        $programmeUser3->setRowIndex(2);
        $programmeUser3->setOrderIndex(2);

        $programmeUsers = new ArrayCollection();
        $programmeUsers->add($programmeUser1);
        $programmeUsers->add($programmeUser2);
        $programmeUsers->add($programmeUser3);

        $this->assertEquals(
            [
                [$user1->getPeoplesoftId()],
                [$user2->getPeoplesoftId(),$user3->getPeoplesoftId()]
            ],
            $this->programme->setProgrammeCoreGroup( $programmeUsers )->getCoreGroupPSoftIds()
        );
    }

    public function testCoreGroupPSoftIdsAuto()
    {
        $this->course->setPublished( true );

        $coordinator = new RoleMock();
        $coordinator->setId( 848 );
        $coordinator->setName('coordinator');

        $director = new RoleMock();
        $director->setId( 653 );
        $director->setName('director');

        $courseSubscriptions = new ArrayCollection();
        $directors = [];
        $coordinators = [];

        for($i = 0; $i < 3; $i++) {
            $user = new UserMock();
            $user->setId( random_int(10000,99999) );
            $user->setPeoplesoftId( random_int(1000000,9999999) );

            $courseSubscription = new CourseSubscriptionMock();
            $courseSubscription->setId( random_int(10000,99999) );
            $courseSubscription->setRole( $director );
            $courseSubscription->setUser( $user );

            array_push( $directors, $user->getPeoplesoftId() );

            $courseSubscriptions->add($courseSubscription);
        }

        for($i = 0; $i < 3; $i++) {
            $user = new UserMock();
            $user->setId( random_int(10000,99999) );
            $user->setPeoplesoftId( random_int(1000000,9999999) );

            $courseSubscription = new CourseSubscriptionMock();
            $courseSubscription->setId( random_int(10000,99999) );
            $courseSubscription->setRole( $coordinator );
            $courseSubscription->setUser( $user );

            array_push( $coordinators, $user->getPeoplesoftId() );

            $courseSubscriptions->add($courseSubscription);
        }

        $this->course->setCourseSubscriptions($courseSubscriptions);

        $courses = new ArrayCollection();
        $courses->add($this->course);

        $this->programme->setCourses( $courses );

        $this->assertEquals(
            [
                $directors,
                $coordinators
            ],
            $this->programme->setCourseSubscriptions( $courseSubscriptions )->getCoreGroupPSoftIds()
        );
    }

    public function testIsMy()
    {
        $coordinator = new RoleMock();
        $coordinator->setId( 848 );
        $coordinator->setName('coordinator');

        $user = new UserMock();
        $user->setId( random_int(10000,99999) );
        $user->setPeoplesoftId( random_int(1000000,9999999) );
        $user->setCreated(new \DateTime());
        $user->setUpdated(new \DateTime());

        $courseSubscription = new CourseSubscriptionMock();
        $courseSubscription->setId( random_int(10000,99999) );
        $courseSubscription->setRole( $coordinator );
        $courseSubscription->setUser( $user );

        $courseSubscriptions = new ArrayCollection();
        $courseSubscriptions->add($courseSubscription);

        $this->programme->setCourseSubscriptions($courseSubscriptions);
        $this->programme->setRequestorId( $user->getId() );

        $this->assertTrue( $this->programme->checkIfMy() );

        $programmeAdmin = new ProgrammeAdministrator();
        $programmeAdmin->setProgramme($this->programme);
        $programmeAdmin->setUser($user);
        $programmeAdmin->setOwner(true);

        $this->programme->setProgrammeAdministrators([$programmeAdmin]);
        $this->assertEquals(true, $this->programme->checkIfOwner());

        $this->programme->setRequestorId($user->getId());
        $this->assertEquals(true, $this->programme->checkIfMy());

        $this->assertEquals([$user->getPeoplesoftId()], $this->programme->getProgrammeTeam());
    }

    public function testLatestUpdatedPersonTimestamp() {
        $this->programme->setForParticipant(true);
        $this->programme->setForStaff(true);
        $this->programme->setIncludeHidden(true);

        $user = new UserMock();
        $user->setId( random_int(10000,99999) );
        $user->setPeoplesoftId( random_int(1000000,9999999) );
        $user->setCreated($this->now);
        $user->setUpdated($this->now);
        $user->setProfileLastUpdated($this->now);

        $coordinator = new RoleMock();
        $coordinator->setId( 848 );
        $coordinator->setName('coordinator');

        $inseadStaff = new RoleMock();
        $inseadStaff->setId( 849 );
        $inseadStaff->setName('inseadteam');

        $courseSubscription1 = new CourseSubscriptionMock();
        $courseSubscription1->setId( 46997654 );
        $courseSubscription1->setCourse($this->course);
        $courseSubscription1->setUser($user);
        $courseSubscription1->setRole($coordinator);
        $courseSubscription1->setProgramme($this->course->getProgramme());

        $newNow = new \DateTime();
        $newNow = $newNow->modify("+5 days");
        $user2 = new UserMock();
        $user2->setId( random_int(10000,99999) );
        $user2->setPeoplesoftId( random_int(1000000,9999999) );
        $user2->setCreated($newNow);
        $user2->setUpdated($newNow);
        $user2->setProfileLastUpdated($newNow);

        $courseSubscription2 = new CourseSubscriptionMock();
        $courseSubscription2->setId( 46997654 );
        $courseSubscription2->setCourse($this->course);
        $courseSubscription2->setUser($user2);
        $courseSubscription2->setRole($inseadStaff);
        $courseSubscription2->setProgramme($this->course->getProgramme());

        $courseSubscriptions = new ArrayCollection();
        $courseSubscriptions->add($courseSubscription1);
        $courseSubscriptions->add($courseSubscription2);
        $this->programme->setCourseSubscriptions($courseSubscriptions);

        $this->assertEquals($newNow, $this->programme->getLatestUpdatedPersonTimestamp());
    }

    public function testBookTImeStamp() {
        $this->programme->setBookTimestampBusiness($this->now);
        $this->programme->setBookTimestampFull($this->now);

        $this->assertEquals($this->now, $this->programme->getBookTimestampBusiness());
        $this->assertEquals($this->now, $this->programme->getBookTimestampFull());
    }

    public function testArchive() {
        $this->course->setPublished(true);
        $this->programme->setArchived(true);
        $this->programme->setArchiveDate($this->now);

        $this->assertEquals(true, $this->programme->getArchived());
        $this->assertEquals($this->now, $this->programme->getArchiveDate());

        $dateLessAday = $this->now->modify("-2 days");
        $this->programme->setArchiveDate($dateLessAday);
        $this->assertEquals(3, $this->programme->getArchivedRemainingDays());

        $interval = new \DateInterval('P1D');
        $yesterday = new \DateTime();
        $yesterday->sub($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $yesterday );
        $this->course->setEndDate( $yesterday );

        $courses = new ArrayCollection();
        $courses->add($this->course);
        $this->programme->setCourses( $courses );

        $this->assertFalse($this->programme->getAllowedToArchive());

        $interval = new \DateInterval('P3Y');
        $yesterday = new \DateTime();
        $yesterday->sub($interval);
        $this->course->setEndDate( $yesterday );
        $courses = new ArrayCollection();
        $courses->add($this->course);
        $this->programme->setCourses( $courses );

        $this->assertTrue($this->programme->getAllowedToArchive());
    }

    public function testIsComplete()
    {
        $interval = new \DateInterval('P1D');
        $yesterday = new \DateTime();
        $yesterday->sub($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $yesterday );
        $this->course->setEndDate( $yesterday );

        $courses = new ArrayCollection();
        $courses->add($this->course);
        $this->programme->setCourses( $courses );

        $this->assertTrue( $this->programme->checkIfCompleted() );
    }

    public function testIsNotComplete()
    {
        $interval = new \DateInterval('P1D');
        $tomorrow = new \DateTime();
        $tomorrow->add($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $tomorrow );
        $this->course->setEndDate( $tomorrow );

        $courses = new ArrayCollection();
        $courses->add($this->course);
        $this->programme->setCourses( $courses );

        $this->assertFalse( $this->programme->checkIfCompleted() );
    }

    public function testIsNotCompleteBecauseEmpty()
    {
        $this->assertFalse( $this->programme->checkIfCompleted() );
    }

    public function testIsPending()
    {
        $interval = new \DateInterval('P1D');
        $tomorrow = new \DateTime();
        $tomorrow->add($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $tomorrow );
        $this->course->setEndDate( $tomorrow );

        $courses = new ArrayCollection();
        $courses->add($this->course);
        $this->programme->setCourses( $courses );

        $this->assertTrue( $this->programme->checkIfPending() );
    }

    public function testIsNotPending()
    {
        $interval = new \DateInterval('P1D');
        $yesterday = new \DateTime();
        $yesterday->sub($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $yesterday );
        $this->course->setEndDate( $yesterday );

        $courses = new ArrayCollection();
        $courses->add($this->course);

        $this->programme->setCourses( $courses );

        $this->assertFalse( $this->programme->checkIfPending() );
    }

    public function testIsPendingBecauseEmpty()
    {
        $this->assertTrue( $this->programme->checkIfPending() );
    }

    public function testIsLive()
    {
        $interval = new \DateInterval('P1D');
        $yesterday = new \DateTime();
        $yesterday->sub($interval);
        $tomorrow = new \DateTime();
        $tomorrow->add($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $yesterday );
        $this->course->setEndDate( $tomorrow );

        $courses = new ArrayCollection();
        $courses->add($this->course);

        $this->programme->setCourses( $courses );

        $this->assertTrue( $this->programme->checkIfLive() );
    }

    public function testIsNotLive()
    {
        $interval = new \DateInterval('P1D');
        $tomorrow = new \DateTime();
        $tomorrow->add($interval);

        $this->course->setPublished( true );
        $this->course->setStartDate( $tomorrow );
        $this->course->setEndDate( $tomorrow );

        $courses = new ArrayCollection();
        $courses->add($this->course);

        $this->programme->setCourses( $courses );

        $this->assertFalse( $this->programme->checkIfLive() );
    }

    public function testClone() {
        $this->programme->setCode("_copy_");
        $cloneProgramme = clone $this->programme;
        $cloneProgramme->setCreated($this->programme->getCreated());
        $cloneProgramme->setUpdated($this->programme->getUpdated());
        $this->programme->setId(12);
        $cloneProgramme->setId(12);
        $cloneProgramme->setCode("_copy_");
        $cloneProgramme->setPublished($this->programme->getPublished());
        $this->assertEquals($cloneProgramme, $this->programme);
    }
}
